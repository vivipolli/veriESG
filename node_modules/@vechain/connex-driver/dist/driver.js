"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionType = exports.Driver = void 0;
const driver_no_vendor_1 = require("./driver-no-vendor");
const thor_devkit_1 = require("thor-devkit");
const crypto_1 = require("crypto");
const bignumber_js_1 = require("bignumber.js");
/** class fully implements DriverInterface */
class Driver extends driver_no_vendor_1.DriverNoVendor {
    constructor(net, genesis, initialHead, wallet) {
        super(net, genesis, initialHead);
        this.wallet = wallet;
        /** params for tx construction */
        this.txParams = {
            expiration: 18,
            gasPriceCoef: 0,
            maxPriorityFeePerGas: 0,
            txType: exports.TransactionType.DynamicFee
        };
    }
    /**
     * create driver instance
     * it will fetch config(genesis, head) via net as construction params
     * @param net
     * @param wallet
     */
    static connect(net, wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const genesis = yield net.http('GET', 'blocks/0');
            const best = yield net.http('GET', 'blocks/best', {
                validateResponseHeader: headers => {
                    const xgid = headers['x-genesis-id'];
                    if (xgid && xgid !== genesis.id) {
                        throw new Error(`responded 'x-genesis-id' not matched`);
                    }
                }
            });
            const head = {
                id: best.id,
                number: best.number,
                timestamp: best.timestamp,
                parentID: best.parentID,
                txsFeatures: best.txsFeatures,
                gasLimit: best.gasLimit,
            };
            if (best.baseFeePerGas) {
                head.baseFeePerGas = best.baseFeePerGas;
            }
            return new Driver(net, genesis, head, wallet);
        });
    }
    signTx(msg, options) {
        return __awaiter(this, void 0, void 0, function* () {
            options.onAccepted && options.onAccepted();
            const key = this.findKey(options.signer);
            const clauses = msg.map(c => ({
                to: c.to ? c.to.toLowerCase() : null,
                value: c.value.toString().toLowerCase(),
                data: (c.data || '0x').toLowerCase(),
            }));
            const gas = options.gas || (yield this.estimateGas(clauses, key.address));
            // Base transaction body
            const baseTxBody = {
                chainTag: Number.parseInt(this.genesis.id.slice(-2), 16),
                blockRef: this.head.id.slice(0, 18),
                expiration: this.txParams.expiration,
                clauses,
                gas,
                dependsOn: options.dependsOn || null,
                nonce: '0x' + crypto_1.randomBytes(8).toString('hex')
            };
            // Determine transaction type and create appropriate body
            let txType = this.txParams.txType;
            if (txType === exports.TransactionType.DynamicFee && !this.head.baseFeePerGas) {
                // If baseFeePerGas is not available, means dynamic fee is not enabled
                // in the current block, fallback to legacy transaction
                txType = exports.TransactionType.Legacy;
            }
            let txBody;
            if (txType === exports.TransactionType.DynamicFee) {
                // Dynamic fee transaction
                txBody = Object.assign(Object.assign({}, baseTxBody), { type: exports.TransactionType.DynamicFee, maxPriorityFeePerGas: this.txParams.maxPriorityFeePerGas.toString(), maxFeePerGas: new bignumber_js_1.default(this.txParams.maxPriorityFeePerGas).plus(this.head.baseFeePerGas).toString() });
            }
            else {
                // Legacy transaction
                txBody = Object.assign(Object.assign({}, baseTxBody), { type: exports.TransactionType.Legacy, gasPriceCoef: this.txParams.gasPriceCoef });
            }
            let tx;
            if (options.delegator) {
                const delegatedTx = new thor_devkit_1.Transaction(Object.assign(Object.assign({}, txBody), { reserved: { features: 1 /* vip191 */ } }));
                const originSig = yield key.sign(delegatedTx.signingHash());
                const unsigned = {
                    raw: '0x' + delegatedTx.encode().toString('hex'),
                    origin: key.address
                };
                try {
                    const result = yield this.net.http('POST', options.delegator.url, { body: unsigned });
                    delegatedTx.signature = Buffer.concat([originSig, Buffer.from(result.signature.slice(2), 'hex')]);
                    tx = delegatedTx;
                }
                catch (err) {
                    // tslint:disable-next-line: no-console
                    console.warn('tx delegation error: ', err);
                    // fallback to non-vip191 tx
                }
            }
            if (!tx) {
                tx = new thor_devkit_1.Transaction(txBody);
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                tx.signature = yield key.sign(tx.signingHash());
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            const raw = `0x${tx.encode().toString('hex')}`;
            if (this.onTxCommit) {
                this.onTxCommit({
                    id: tx.id,
                    raw,
                    resend: () => __awaiter(this, void 0, void 0, function* () {
                        yield this.sendTx(raw);
                    })
                });
            }
            yield this.sendTx(raw);
            return {
                txid: tx.id,
                signer: key.address
            };
        });
    }
    signCert(msg, options) {
        return __awaiter(this, void 0, void 0, function* () {
            options.onAccepted && options.onAccepted();
            const key = this.findKey(options.signer);
            const annex = {
                domain: 'localhost',
                timestamp: this.head.timestamp,
                signer: key.address
            };
            const unsigned = thor_devkit_1.Certificate.encode(Object.assign(Object.assign({}, msg), annex));
            const signature = yield key.sign(thor_devkit_1.blake2b256(unsigned));
            return {
                annex,
                signature: '0x' + signature.toString('hex')
            };
        });
    }
    findKey(addr) {
        if (this.wallet) {
            const keys = this.wallet.list;
            const key = addr ? keys.find(k => k.address === addr) : keys[0];
            if (key) {
                return key;
            }
        }
        throw new Error('empty wallet');
    }
    sendTx(raw) {
        return this.httpPost('transactions', { raw });
    }
    estimateGas(clauses, caller) {
        return __awaiter(this, void 0, void 0, function* () {
            const outputs = yield this.explain({
                clauses,
                caller,
            }, this.head.id);
            const execGas = outputs.reduce((sum, out) => sum + out.gasUsed, 0);
            const intrinsicGas = thor_devkit_1.Transaction.intrinsicGas(clauses);
            return intrinsicGas + (execGas ? (execGas + 15000) : 0);
        });
    }
}
exports.Driver = Driver;
exports.TransactionType = thor_devkit_1.Transaction.Type;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RyaXZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSx5REFBbUQ7QUFFbkQsNkNBQWtFO0FBQ2xFLG1DQUFvQztBQUNwQywrQ0FBb0M7QUFFcEMsNkNBQTZDO0FBQzdDLE1BQWEsTUFBTyxTQUFRLGlDQUFjO0lBZ0R0QyxZQUNJLEdBQVEsRUFDUixPQUEwQixFQUMxQixXQUF3QyxFQUN2QixNQUFlO1FBRWhDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO1FBRmYsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQVpwQyxpQ0FBaUM7UUFDMUIsYUFBUSxHQUFHO1lBQ2QsVUFBVSxFQUFFLEVBQUU7WUFDZCxZQUFZLEVBQUUsQ0FBQztZQUNmLG9CQUFvQixFQUFFLENBQWtCO1lBQ3hDLE1BQU0sRUFBRSx1QkFBZSxDQUFDLFVBQVU7U0FDckMsQ0FBQTtJQVNELENBQUM7SUF0REQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQU8sT0FBTyxDQUFDLEdBQVEsRUFBRSxNQUFlOztZQUNqRCxNQUFNLE9BQU8sR0FBc0IsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQTtZQUNwRSxNQUFNLElBQUksR0FBc0IsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUU7Z0JBQ2pFLHNCQUFzQixFQUFFLE9BQU8sQ0FBQyxFQUFFO29CQUM5QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7b0JBQ3BDLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxPQUFPLENBQUMsRUFBRSxFQUFFO3dCQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7cUJBQzFEO2dCQUNMLENBQUM7YUFDSixDQUFDLENBQUE7WUFFRixNQUFNLElBQUksR0FB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