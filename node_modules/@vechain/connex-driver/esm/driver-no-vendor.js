var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { blake2b256 } from 'thor-devkit';
import { Cache } from './cache';
import { sleep } from './common';
import { InterruptedError, PromInt } from './promint';
/** class implements Connex.Driver leaves out Vendor related methods */
export class DriverNoVendor {
    constructor(net, genesis, initialHead) {
        this.net = net;
        this.genesis = genesis;
        this.headResolvers = [];
        this.int = new PromInt();
        this.cache = new Cache();
        // to merge concurrent identical remote requests
        this.pendingRequests = {};
        if (initialHead) {
            this.head = initialHead;
        }
        else {
            this.head = {
                id: genesis.id,
                number: genesis.number,
                timestamp: genesis.timestamp,
                parentID: genesis.parentID,
                txsFeatures: genesis.txsFeatures,
                gasLimit: genesis.gasLimit
            };
            if (genesis.baseFeePerGas) {
                this.head.baseFeePerGas = genesis.baseFeePerGas;
            }
        }
        void this.headTrackerLoop();
    }
    // close the driver to prevent mem leak
    close() {
        this.int.interrupt();
    }
    // implementations
    pollHead() {
        return this.int.wrap(new Promise(resolve => {
            this.headResolvers.push(() => resolve(this.head));
        }));
    }
    getBlock(revision) {
        return this.cache.getBlock(revision, () => this.httpGet(`blocks/${revision}`));
    }
    getFeesHistory(newestBlock, blockCount, rewardPercentiles) {
        return this.cache.getFeesHistory(newestBlock, blockCount, rewardPercentiles || [], () => {
            const params = {
                newestBlock: newestBlock.toString(),
                blockCount: blockCount.toString()
            };
            if (rewardPercentiles && rewardPercentiles.length > 0) {
                params.rewardPercentiles = rewardPercentiles.join(',');
            }
            return this.httpGet('fees/history', params);
        });
    }
    getPriorityFeeSuggestion() {
        // No cache since we do not have a key for it
        return this.httpGet('fees/priority').then(res => res.maxPriorityFeePerGas);
    }
    getTransaction(id, allowPending) {
        return this.cache.getTx(id, () => {
            const query = { head: this.head.id };
            if (allowPending) {
                query.pending = 'true';
            }
            return this.httpGet(`transactions/${id}`, query);
        });
    }
    getReceipt(id) {
        return this.cache.getReceipt(id, () => this.httpGet(`transactions/${id}/receipt`, { head: this.head.id }));
    }
    getAccount(addr, revision) {
        return this.cache.getAccount(addr, revision, () => this.httpGet(`accounts/${addr}`, { revision }));
    }
    getCode(addr, revision) {
        return this.cache.getTied(`code-${addr}`, revision, () => this.httpGet(`accounts/${addr}/code`, { revision }));
    }
    getStorage(addr, key, revision) {
        return this.cache.getTied(`storage-${addr}-${key}`, revision, () => this.httpGet(`accounts/${addr}/storage/${key}`, { revision }));
    }
    explain(arg, revision, cacheHints) {
        const cacheKey = `explain-${blake2b256(JSON.stringify(arg)).toString('hex')}`;
        return this.cache.getTied(cacheKey, revision, () => this.httpPost('accounts/*', arg, { revision }), cacheHints);
    }
    filterEventLogs(arg, cacheHints) {
        const cacheKey = `event-${blake2b256(JSON.stringify(arg)).toString('hex')}`;
        return this.cache.getTied(cacheKey, this.head.id, () => this.httpPost('logs/event', arg), cacheHints);
    }
    filterTransferLogs(arg, cacheHints) {
        const cacheKey = `transfer-${blake2b256(JSON.stringify(arg)).toString('hex')}`;
        return this.cache.getTied(cacheKey, this.head.id, () => this.httpPost('logs/transfer', arg), cacheHints);
    }
    signTx(msg, options) {
        throw new Error('signer not implemented');
    }
    signCert(msg, options) {
        throw new Error('signer not implemented');
    }
    //////
    mergeRequest(req, ...keyParts) {
        const key = JSON.stringify(keyParts);
        const pending = this.pendingRequests[key];
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        if (pending) {
            return pending;
        }
        return this.pendingRequests[key] = (() => __awaiter(this, void 0, void 0, function* () {
            try {
                return yield req();
            }
            finally {
                delete this.pendingRequests[key];
            }
        }))();
    }
    httpGet(path, query) {
        return this.mergeRequest(() => {
            return this.net.http('GET', path, {
                query,
                validateResponseHeader: this.headerValidator
            });
        }, path, query || '');
    }
    httpPost(path, body, query) {
        return this.mergeRequest(() => {
            return this.net.http('POST', path, {
                query,
                body,
                validateResponseHeader: this.headerValidator
            });
        }, path, query || '', body || '');
    }
    get headerValidator() {
        return (headers) => {
            const xgid = headers['x-genesis-id'];
            if (xgid && xgid !== this.genesis.id) {
                throw new Error(`responded 'x-genesis-id' not matched`);
            }
        };
    }
    emitNewHead() {
        const resolvers = this.headResolvers;
        this.headResolvers = [];
        resolvers.forEach(r => r());
    }
    headTrackerLoop() {
        return __awaiter(this, void 0, void 0, function* () {
            for (;;) {
                let attemptWs = false;
                try {
                    const best = yield this.int.wrap(this.httpGet('blocks/best'));
                    if (best.id !== this.head.id && best.number >= this.head.number) {
                        this.head = {
                            id: best.id,
                            number: best.number,
                            timestamp: best.timestamp,
                            parentID: best.parentID,
                            txsFeatures: best.txsFeatures,
                            gasLimit: best.gasLimit
                        };
                        if (best.baseFeePerGas) {
                            this.head.baseFeePerGas = best.baseFeePerGas;
                        }
                        this.cache.handleNewBlock(this.head, undefined, best);
                        this.emitNewHead();
                        if (Date.now() - this.head.timestamp * 1000 < 60 * 1000) {
                            // nearly synced
                            attemptWs = true;
                        }
                    }
                }
                catch (err) {
                    if (err instanceof InterruptedError) {
                        break;
                    }
                }
                if (attemptWs) {
                    try {
                        yield this.trackWs();
                    }
                    catch (err) {
                        if (err instanceof InterruptedError) {
                            break;
                        }
                    }
                }
                try {
                    yield this.int.wrap(sleep(8 * 1000));
                }
                catch (_a) {
                    break;
                }
            }
        });
    }
    trackWs() {
        return __awaiter(this, void 0, void 0, function* () {
            const wsPath = `subscriptions/beat2?pos=${this.head.parentID}`;
            const wsr = this.net.openWebSocketReader(wsPath);
            try {
                for (;;) {
                    const data = yield this.int.wrap(wsr.read());
                    const beat = JSON.parse(data);
                    if (!beat.obsolete && beat.id !== this.head.id && beat.number >= this.head.number) {
                        this.head = {
                            id: beat.id,
                            number: beat.number,
                            timestamp: beat.timestamp,
                            parentID: beat.parentID,
                            txsFeatures: beat.txsFeatures,
                            gasLimit: beat.gasLimit
                        };
                        if (beat.baseFeePerGas) {
                            this.head.baseFeePerGas = beat.baseFeePerGas;
                        }
                        this.cache.handleNewBlock(this.head, { k: beat.k, bits: beat.bloom });
                        this.emitNewHead();
                    }
                }
            }
            finally {
                wsr.close();
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,