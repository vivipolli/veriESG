"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newThor = void 0;
const V = require("validator-ts");
const account_visitor_1 = require("./account-visitor");
const block_visitor_1 = require("./block-visitor");
const explainer_1 = require("./explainer");
const fees_visitor_1 = require("./fees-visitor");
const filter_1 = require("./filter");
const head_tracker_1 = require("./head-tracker");
const R = require("./rules");
const tx_visitor_1 = require("./tx-visitor");
function newThor(driver) {
    const headTracker = head_tracker_1.newHeadTracker(driver);
    const readyDriver = (() => __awaiter(this, void 0, void 0, function* () {
        if (headTracker.head.number > 0) {
            return driver;
        }
        yield headTracker.ticker().next();
        return driver;
    }))();
    const genesis = JSON.parse(JSON.stringify(driver.genesis));
    return {
        get genesis() { return genesis; },
        get status() {
            return {
                head: headTracker.head,
                progress: headTracker.progress,
                finalized: headTracker.finalized
            };
        },
        ticker: () => headTracker.ticker(),
        account: addr => {
            addr = R.test(addr, R.address, 'arg0').toLowerCase();
            return account_visitor_1.newAccountVisitor(readyDriver, addr);
        },
        block: revision => {
            if (typeof revision === 'undefined') {
                revision = driver.head.id;
            }
            else {
                R.ensure(typeof revision === 'string' ? R.isHexBytes(revision, 32) : R.isUInt(revision, 32), 'arg0: expected bytes32 or unsigned 32-bit integer');
            }
            return block_visitor_1.newBlockVisitor(driver, typeof revision === 'string' ? revision.toLowerCase() : revision);
        },
        transaction: id => {
            id = R.test(id, R.bytes32, 'arg0').toLowerCase();
            return tx_visitor_1.newTxVisitor(readyDriver, id);
        },
        filter: (kind, criteria) => {
            R.ensure(kind === 'event' || kind === 'transfer', `arg0: expected 'event' or 'transfer'`);
            if (kind === 'event') {
                R.test(criteria, [eventCriteriaScheme], 'arg1');
                return filter_1.newFilter(readyDriver, 'event', criteria
                    .map(c => {
                    return {
                        address: c.address ? c.address.toLowerCase() : undefined,
                        topic0: c.topic0 ? c.topic0.toLowerCase() : undefined,
                        topic1: c.topic1 ? c.topic1.toLowerCase() : undefined,
                        topic2: c.topic2 ? c.topic2.toLowerCase() : undefined,
                        topic3: c.topic3 ? c.topic3.toLowerCase() : undefined,
                        topic4: c.topic4 ? c.topic4.toLowerCase() : undefined
                    };
                }));
            }
            else {
                R.test(criteria, [transferCriteriaScheme], 'arg1');
                return filter_1.newFilter(readyDriver, 'transfer', criteria
                    .map(c => {
                    return {
                        txOrigin: c.txOrigin ? c.txOrigin.toLowerCase() : undefined,
                        sender: c.sender ? c.sender.toLowerCase() : undefined,
                        recipient: c.recipient ? c.recipient.toLowerCase() : undefined
                    };
                }));
            }
        },
        explain: (clauses) => {
            R.test(clauses, [clauseScheme], 'arg0');
            return explainer_1.newExplainer(readyDriver, clauses);
        },
        fees: {
            history: (newestBlock) => {
                if (typeof newestBlock === 'undefined') {
                    newestBlock = driver.head.id;
                }
                else {
                    R.ensure(typeof newestBlock === 'string' ? R.isHexBytes(newestBlock, 32) : R.isUInt(newestBlock, 32), 'arg0: expected bytes32 or unsigned 32-bit integer');
                }
                return fees_visitor_1.newFeesHistoryVisitor(driver, newestBlock);
            },
            priorityFee: () => driver.getPriorityFeeSuggestion()
        }
    };
}
exports.newThor = newThor;
const clauseScheme = {
    to: V.nullable(R.address),
    value: R.bigInt,
    data: V.optional(R.bytes)
};
const eventCriteriaScheme = {
    address: V.optional(R.address),
    topic0: V.optional(R.bytes32),
    topic1: V.optional(R.bytes32),
    topic2: V.optional(R.bytes32),
    topic3: V.optional(R.bytes32),
    topic4: V.optional(R.bytes32)
};
const transferCriteriaScheme = {
    sender: V.optional(R.address),
    recipient: V.optional(R.address),
    txOrigin: V.optional(R.address)
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90aG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLGtDQUFpQztBQUNqQyx1REFBcUQ7QUFDckQsbURBQWlEO0FBQ2pELDJDQUEwQztBQUMxQyxpREFBc0Q7QUFDdEQscUNBQW9DO0FBQ3BDLGlEQUErQztBQUMvQyw2QkFBNEI7QUFDNUIsNkNBQTJDO0FBRTNDLFNBQWdCLE9BQU8sQ0FBQyxNQUFxQjtJQUN6QyxNQUFNLFdBQVcsR0FBRyw2QkFBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBUyxFQUFFO1FBQzVCLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLE9BQU8sTUFBTSxDQUFBO1NBQ2hCO1FBQ0QsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUE7SUFDakIsQ0FBQyxDQUFBLENBQUMsRUFBRSxDQUFBO0lBRUosTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBc0IsQ0FBQTtJQUMvRSxPQUFPO1FBQ0gsSUFBSSxPQUFPLEtBQUssT0FBTyxPQUFPLENBQUEsQ0FBQyxDQUFDO1FBQ2hDLElBQUksTUFBTTtZQUNOLE9BQU87Z0JBQ0gsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJO2dCQUN0QixRQUFRLEVBQUUsV0FBVyxDQUFDLFFBQVE7Z0JBQzlCLFNBQVMsRUFBRSxXQUFXLENBQUMsU0FBUzthQUNuQyxDQUFBO1FBQ0wsQ0FBQztRQUNELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1FBQ2xDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNaLElBQUksR0FB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