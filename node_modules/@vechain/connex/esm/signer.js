var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { loadLibrary } from './script-loader';
import randomBytes from 'randombytes';
import { blake2b256 } from 'thor-devkit';
const BUDDY_SRC = 'https://unpkg.com/@vechain/connex-wallet-buddy@0.1';
const BUDDY_LIB_NAME = 'ConnexWalletBuddy';
export const createSync2 = (genesisId) => __awaiter(void 0, void 0, void 0, function* () {
    return loadLibrary(BUDDY_SRC, BUDDY_LIB_NAME).then(lib => lib.create(genesisId, () => randomBytes(16).toString('hex'), val => blake2b256(val).toString('hex')));
});
export const createSync = (genesisId) => __awaiter(void 0, void 0, void 0, function* () {
    const v1 = window.connex.vendor;
    return Promise.resolve({
        signTx: (msg, options) => {
            const s1 = v1.sign('tx');
            options.signer && s1.signer(options.signer);
            options.gas && s1.gas(options.gas);
            options.dependsOn && s1.dependsOn(options.dependsOn);
            options.link && s1.link(options.link);
            options.comment && s1.link(options.comment);
            if (options.delegator) {
                const url = options.delegator.url;
                s1.delegate((unsignedTx) => __awaiter(void 0, void 0, void 0, function* () {
                    const res = yield fetch(url, {
                        method: 'POST',
                        body: JSON.stringify(unsignedTx),
                        headers: {
                            "Content-Type": 'application/json'
                        }
                    });
                    return res.json();
                }));
            }
            options.onAccepted && options.onAccepted();
            return s1.request(msg);
        },
        signCert: (msg, options) => {
            const s1 = v1.sign('cert');
            options.signer && s1.signer(options.signer);
            options.link && s1.link(options.link);
            options.onAccepted && options.onAccepted();
            return s1.request(msg);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFFN0MsT0FBTyxXQUFXLE1BQU0sYUFBYSxDQUFBO0FBQ3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFFeEMsTUFBTSxTQUFTLEdBQUcsb0RBQW9ELENBQUE7QUFDdEUsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUE7QUFJMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFrQixDQUFPLFNBQWdCLEVBQUUsRUFBRTtJQUNqRSxPQUFPLFdBQVcsQ0FDZCxTQUFTLEVBQ1QsY0FBYyxDQUNqQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQ3BCLFNBQVMsRUFDVCxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUNyQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQ3pDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQSxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFrQixDQUFPLFNBQWlCLEVBQUUsRUFBRTtJQUNqRSxNQUFNLEVBQUUsR0FBSSxNQUFzQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDaEUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ25CLE1BQU0sRUFBRSxDQUFDLEdBQTRCLEVBQUUsT0FBZ0MsRUFBcUMsRUFBRTtZQUMxRyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3hCLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDM0MsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNsQyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ3BELE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDckMsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMzQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQ25CLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFBO2dCQUNqQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQU8sVUFBVSxFQUFFLEVBQUU7b0JBQzdCLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRTt3QkFDekIsTUFBTSxFQUFFLE1BQU07d0JBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO3dCQUNoQyxPQUFPLEVBQUU7NEJBQ0wsY0FBYyxFQUFFLGtCQUFrQjt5QkFDckM7cUJBQ0osQ0FBQyxDQUFBO29CQUVGLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO2dCQUNyQixDQUFDLENBQUEsQ0FBQyxDQUFBO2FBQ0w7WUFDRCxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUUxQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsQ0FBQztRQUNELFFBQVEsRUFBRSxDQUFDLEdBQThCLEVBQUUsT0FBa0MsRUFBdUMsRUFBRTtZQUNsSCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQzFCLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDM0MsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNyQyxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQTtZQUUxQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsQ0FBQztLQUNKLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQSxDQUFBIn0=