"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mnemonic = void 0;
const HD = __importStar(require("@vechain/ethers/utils/hdnode"));
const crypto_1 = require("crypto");
const hdnode_1 = require("./hdnode");
var mnemonic;
(function (mnemonic) {
    /**
     * generate BIP39 mnemonic words
     * @param rng the optional random number generator, which generates 16~32 (step 4) random bytes.
     * Every 4 bytes produce 3 words.
     */
    function generate(rng) {
        rng = rng !== null && rng !== void 0 ? rng : (() => crypto_1.randomBytes(128 / 8));
        return HD.entropyToMnemonic(rng()).split(' ');
    }
    mnemonic.generate = generate;
    /**
     * check if the given mnemonic words have valid checksum
     * @param words mnemonic words
     */
    function validate(words) {
        return HD.isValidMnemonic(words.join(' '));
    }
    mnemonic.validate = validate;
    /**
     * derive private key at index 0 from mnemonic words according to BIP32.
     * the derivation path is defined at https://github.com/satoshilabs/slips/blob/master/slip-0044.md
     */
    function derivePrivateKey(words) {
        return hdnode_1.HDNode.fromMnemonic(words).derive(0).privateKey;
    }
    mnemonic.derivePrivateKey = derivePrivateKey;
})(mnemonic = exports.mnemonic || (exports.mnemonic = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW5lbW9uaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW5lbW9uaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlFQUFrRDtBQUNsRCxtQ0FBb0M7QUFDcEMscUNBQWlDO0FBRWpDLElBQWlCLFFBQVEsQ0EwQnhCO0FBMUJELFdBQWlCLFFBQVE7SUFDckI7Ozs7T0FJRztJQUNILFNBQWdCLFFBQVEsQ0FBQyxHQUFrQjtRQUN2QyxHQUFHLEdBQUcsR0FBRyxhQUFILEdBQUcsY0FBSCxHQUFHLEdBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pDLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2pELENBQUM7SUFIZSxpQkFBUSxXQUd2QixDQUFBO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsUUFBUSxDQUFDLEtBQWU7UUFDcEMsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRmUsaUJBQVEsV0FFdkIsQ0FBQTtJQUVEOzs7T0FHRztJQUNILFNBQWdCLGdCQUFnQixDQUFDLEtBQWU7UUFDNUMsT0FBTyxlQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFXLENBQUE7SUFDM0QsQ0FBQztJQUZlLHlCQUFnQixtQkFFL0IsQ0FBQTtBQUNMLENBQUMsRUExQmdCLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBMEJ4QiJ9