"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bloom = void 0;
const blake2b_1 = require("./blake2b");
const buffer_1 = require("buffer");
/**
 * 2048 bits Bloom filter
 */
class Bloom {
    /**
     * new bloom filter instance
     * @param k number of hash functions
     * @param bits leave it out to construct an empty one
     */
    constructor(k, bits) {
        if (bits) {
            this.bits = bits;
        }
        else {
            this.bits = buffer_1.Buffer.alloc(Bloom.BITS_LENGTH / 8);
        }
        this.k = k;
    }
    /** estimate k(number of hash functions) according to item count */
    static estimateK(itemCount) {
        const k = Math.round(this.BITS_LENGTH / itemCount * Math.LN2);
        return Math.max(Math.min(k, this.MAX_K), 1);
    }
    /**
     * add item
     * @param item
     */
    add(item) {
        this.distribute(item, (index, bit) => {
            // tslint:disable-next-line:no-bitwise
            this.bits[index] |= bit;
            return true;
        });
    }
    /**
     * test if an item contained. (false positive)
     * @param item
     */
    test(item) {
        return this.distribute(item, (index, bit) => {
            // tslint:disable-next-line:no-bitwise
            return (this.bits[index] & bit) === bit;
        });
    }
    distribute(item, cb) {
        const hash = blake2b_1.blake2b256(item);
        for (let i = 0; i < this.k; i++) {
            // tslint:disable-next-line:no-bitwise
            const d = (hash[i * 2 + 1] + (hash[i * 2] << 8)) % Bloom.BITS_LENGTH;
            // tslint:disable-next-line:no-bitwise
            const bit = 1 << (d % 8);
            if (!cb(Math.floor(d / 8), bit)) {
                return false;
            }
        }
        return true;
    }
}
exports.Bloom = Bloom;
/** number of hash functions */
Bloom.MAX_K = 16;
/** bit length */
Bloom.BITS_LENGTH = 2048;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvb20uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmxvb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQXNDO0FBQ3RDLG1DQUErQjtBQUUvQjs7R0FFRztBQUNILE1BQWEsS0FBSztJQWVkOzs7O09BSUc7SUFDSCxZQUFZLENBQVMsRUFBRSxJQUFhO1FBQ2hDLElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7U0FDbkI7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDZCxDQUFDO0lBckJELG1FQUFtRTtJQUM1RCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQWlCO1FBQ3JDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzdELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDL0MsQ0FBQztJQW1CRDs7O09BR0c7SUFDSSxHQUFHLENBQUMsSUFBWTtRQUNuQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQyxzQ0FBc0M7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUE7WUFDdkIsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRDs7O09BR0c7SUFDSSxJQUFJLENBQUMsSUFBWTtRQUNwQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ3hDLHNDQUFzQztZQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUE7UUFDM0MsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRU8sVUFBVSxDQUFDLElBQVksRUFBRSxFQUEyQztRQUN4RSxNQUFNLElBQUksR0FBRyxvQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLHNDQUFzQztZQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUE7WUFDcEUsc0NBQXNDO1lBQ3RDLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixPQUFPLEtBQUssQ0FBQTthQUNmO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7O0FBaEVMLHNCQWlFQztBQWhFRywrQkFBK0I7QUFDUixXQUFLLEdBQUcsRUFBRSxDQUFBO0FBQ2pDLGlCQUFpQjtBQUNNLGlCQUFXLEdBQUcsSUFBSSxDQUFBIn0=