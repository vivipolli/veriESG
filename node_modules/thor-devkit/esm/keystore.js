import * as SecretStorage from '@vechain/ethers/utils/secret-storage';
import { Buffer } from 'buffer';
export var Keystore;
(function (Keystore) {
    /**
     * encrypt private key to keystore with given password
     * @param privateKey the private key to be encrypted
     * @param password password to encrypt the private key
     */
    function encrypt(privateKey, password) {
        return SecretStorage.encrypt('0x' + privateKey.toString('hex'), password, {
            scrypt: {
                N: 131072,
                p: 1,
                r: 8
            }
        }).then(str => normalize(JSON.parse(str)));
    }
    Keystore.encrypt = encrypt;
    /**
     * decrypt private key from keystore
     * an error thrown if not well formed
     * @param ks the keystore
     * @param password password to decrypt keystore
     */
    function decrypt(ks, password) {
        return SecretStorage.decrypt(JSON.stringify(ks), password)
            .then(sk => Buffer.from(sk.privateKey.slice(2), 'hex'));
    }
    Keystore.decrypt = decrypt;
    /**
     * roughly check whether keystore is well formed
     * @param ks the keystore
     */
    function wellFormed(ks) {
        try {
            validate(normalize(ks));
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    Keystore.wellFormed = wellFormed;
    /** normalize keystore. e.g. lower case keys */
    function normalize(obj) {
        const lowerKey = (o) => {
            return Object.keys(o).reduce((converted, k) => {
                let v = o[k];
                if (typeof v === 'object') {
                    v = lowerKey(v);
                }
                converted[k.toLowerCase()] = v;
                return converted;
            }, {});
        };
        return lowerKey(obj);
    }
    function validate(ks) {
        if (ks.version !== 1 && ks.version !== 3) {
            throw new Error('unsupported version');
        }
        if (!/^[0-9a-f]{40}$/i.test(ks.address)) {
            throw new Error('invalid address');
        }
        if (!/^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$/i.test(ks.id)) {
            throw new Error('invalid id');
        }
        if (typeof ks.crypto !== 'object') {
            throw new Error('invalid crypto');
        }
        return ks;
    }
})(Keystore || (Keystore = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5c3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2V5c3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLGFBQWEsTUFBTSxzQ0FBc0MsQ0FBQTtBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBVS9CLE1BQU0sS0FBVyxRQUFRLENBd0V4QjtBQXhFRCxXQUFpQixRQUFRO0lBQ3JCOzs7O09BSUc7SUFDSCxTQUFnQixPQUFPLENBQUMsVUFBa0IsRUFBRSxRQUFnQjtRQUN4RCxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQ3hCLElBQUksR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUNqQyxRQUFRLEVBQUU7WUFDVixNQUFNLEVBQUU7Z0JBQ0osQ0FBQyxFQUFFLE1BQU07Z0JBQ1QsQ0FBQyxFQUFFLENBQUM7Z0JBQ0osQ0FBQyxFQUFFLENBQUM7YUFDUDtTQUNKLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQVZlLGdCQUFPLFVBVXRCLENBQUE7SUFFRDs7Ozs7T0FLRztJQUNILFNBQWdCLE9BQU8sQ0FBQyxFQUFZLEVBQUUsUUFBZ0I7UUFDbEQsT0FBTyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDO2FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBSGUsZ0JBQU8sVUFHdEIsQ0FBQTtJQUVEOzs7T0FHRztJQUNILFNBQWdCLFVBQVUsQ0FBQyxFQUFPO1FBQzlCLElBQUk7WUFDQSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDdkIsT0FBTyxJQUFJLENBQUE7U0FDZDtRQUFDLFdBQU07WUFDSixPQUFPLEtBQUssQ0FBQTtTQUNmO0lBQ0wsQ0FBQztJQVBlLG1CQUFVLGFBT3pCLENBQUE7SUFFRCwrQ0FBK0M7SUFDL0MsU0FBUyxTQUFTLENBQUMsR0FBVztRQUMxQixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFO1lBQzNCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxHQUFJLENBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDckIsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3ZCLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ2xCO2dCQUNELFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQzlCLE9BQU8sU0FBUyxDQUFBO1lBQ3BCLENBQUMsRUFBRSxFQUFTLENBQUMsQ0FBQTtRQUNqQixDQUFDLENBQUE7UUFDRCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBRUQsU0FBUyxRQUFRLENBQUMsRUFBWTtRQUMxQixJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQTtTQUN6QztRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtTQUNyQztRQUNELElBQUksQ0FBQyxpRUFBaUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2hGLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7U0FDaEM7UUFDRCxJQUFJLE9BQU8sRUFBRSxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1NBQ3BDO1FBQ0QsT0FBTyxFQUFFLENBQUE7SUFDYixDQUFDO0FBQ0wsQ0FBQyxFQXhFZ0IsUUFBUSxLQUFSLFFBQVEsUUF3RXhCIn0=